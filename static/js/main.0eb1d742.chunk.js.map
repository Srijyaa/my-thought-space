{"version":3,"sources":["components/header/Header.js","components/home/Home.js","components/loginForm/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Home","style","margin","padding","color","LoginForm","props","useState","loginEmail","loginPassword","loginSubmit","state","setState","handleChange","e","target","id","value","console","log","prevState","htmlFor","type","aria-describedby","placeholder","onChange","width","onClick","preventDefault","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2TAuCeA,MAnCf,WACE,OACE,yBAAKC,UAAU,iCAEb,yBAAKA,UAAU,kDACb,kBAAC,IAAD,CAAMA,UAAU,oBAAoBC,GAAG,KAAvC,oBAGA,yBAAKD,UAAU,4BACb,wBAAIA,UAAU,2BACZ,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,YAIF,wBAAID,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,gBAON,wBAAID,UAAU,mCACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,UAA9B,c,MCKGC,MA/Bf,WACE,OACE,yBAAKF,UAAU,kBAAkBG,MAAO,CAAEC,OAAQ,IAAKC,QAAS,MAI9D,yBAAKL,UAAU,kBAAkBG,MAAO,CAAEC,OAAQ,IAAKC,QAAS,MAC9D,yBAAKL,UAAU,QACb,2DACA,wBAAIG,MAAO,CAAEG,MAAO,UAApB,+BAGF,yBAAKN,UAAU,QACb,2NAKA,4BACE,8CACA,qCACA,mCACA,uCACA,2C,6BCyDGO,MA9Ef,SAAmBC,GAAQ,IAAD,EACEC,mBAAS,CACjCC,WAAY,GACZC,cAAe,GACfC,aAAa,IAJS,mBACjBC,EADiB,KACVC,EADU,KAOlBC,EAAe,SAACC,GAAO,IAAD,EACJA,EAAEC,OAAhBC,EADkB,EAClBA,GAAIC,EADc,EACdA,MAEZC,QAAQC,IAAIR,GAEZC,GAAS,SAACQ,GAAD,mBAAC,eACLA,GADI,kBAENJ,EAAKC,QAeV,OAA0B,IAAtBN,EAAMD,YACD,kBAAC,IAAD,CAAUX,GAAG,MAGlB,yBAAKD,UAAU,2CAEb,8BACE,yBAAKA,UAAU,wBACb,2BAAOuB,QAAQ,cAAf,iBACA,2BACEC,KAAK,QACLxB,UAAU,eACVkB,GAAG,aACHO,mBAAiB,YACjBC,YAAY,cACZP,MAAON,EAAMH,WACbiB,SAAUZ,IAEZ,2BAAOG,GAAG,YAAYlB,UAAU,wBAAhC,mDAKF,yBAAKA,UAAU,wBACb,2BAAOuB,QAAQ,iBAAf,YACA,2BACEC,KAAK,WACLxB,UAAU,eACVkB,GAAG,gBACHQ,YAAY,WACZP,MAAON,EAAMF,cACbgB,SAAUZ,KAId,4BACES,KAAK,SACLxB,UAAU,eACVG,MAAO,CAAEyB,MAAO,SAChBC,QAlDgB,SAACb,GACzBA,EAAEc,iBACFV,QAAQC,IAAIR,GAEZC,GAAS,SAACQ,GAAD,mBAAC,eACLA,GADI,IAEPV,aAAa,SAwCT,YC9CKmB,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCJUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.0eb1d742.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header() {\n  return (\n    <div className=\"container-fluid container-nav\">\n      {/* <nav className=\"navbar sticky-top navbar-expand-lg navbar-light bg-light\"> */}\n      <nav className=\"navbar sticky-top navbar-expand-lg navbar-dark\">\n        <Link className=\"navbar-brand ml-2\" to=\"/\">\n          My Thought Space\n        </Link>\n        <div className=\"collapse navbar-collapse\">\n          <ul className=\"navbar-nav mr-auto ml-2\">\n            <li className=\"nav-item-active\">\n              <Link className=\"nav-link\" to=\"#\">\n                Entries\n              </Link>\n            </li>\n            <li className=\"nav-item-active\">\n              <Link className=\"nav-link\" to=\"#\">\n                New Entry\n              </Link>\n            </li>\n          </ul>\n        </div>\n\n        <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./Home.css\";\n\nfunction Home() {\n  return (\n    <div className=\"container-fluid\" style={{ margin: \"0\", padding: \"0\" }}>\n      {/* <div className=\"container-fluid\" style={{ margin: \"0\", padding: \"0\" }}>\n            <img class=\"img-fluid\" src={neurons} alt=\"Header Image\"></img>\n          </div> */}\n      <div className=\"container-fluid\" style={{ margin: \"0\", padding: \"0\" }}>\n        <div className=\"head\">\n          <h1>Welcome to My Thought Space</h1>\n          <h3 style={{ color: \"azure\" }}>A home to your thoughts...</h3>\n        </div>\n\n        <div className=\"info\">\n          <p>\n            This is a platform built to document thoughts and ideas that are\n            lingering around in your mind. Clear your mind of all the\n            distractions by getting them out of your head and onto the cards.\n          </p>\n          <ul>\n            <li>Free Your Mind</li>\n            <li>Focus</li>\n            <li>Act</li>\n            <li>Reflect</li>\n            <li>Thrive</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport \"./LoginForm.css\";\nimport { Redirect } from \"react-router-dom\";\n\nfunction LoginForm(props) {\n  const [state, setState] = useState({\n    loginEmail: \"\",\n    loginPassword: \"\",\n    loginSubmit: false,\n  });\n\n  const handleChange = (e) => {\n    const { id, value } = e.target;\n\n    console.log(state);\n\n    setState((prevState) => ({\n      ...prevState,\n      [id]: value,\n    }));\n  };\n\n  const handleSubmitClick = (e) => {\n    e.preventDefault();\n    console.log(state);\n    // history.push(\"/componentURL\");\n    setState((prevState) => ({\n      ...prevState,\n      loginSubmit: true,\n    }));\n    // alert(\"login button clicked\");\n  };\n\n  if (state.loginSubmit === true) {\n    return <Redirect to=\"/\" />;\n  } else {\n    return (\n      <div className=\"card col-12 col-lg-4 login mt-8 mx-auto\">\n        {/* <div className=\"card col-12 col-lg-4 login-card mt-2 hv-center login\"> */}\n        <form>\n          <div className=\"form-group text-left\">\n            <label htmlFor=\"loginEmail\">Email address</label>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              id=\"loginEmail\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter email\"\n              value={state.loginEmail}\n              onChange={handleChange}\n            />\n            <small id=\"emailHelp\" className=\"form-text text-muted\">\n              We'll never share your email with anyone else.\n            </small>\n          </div>\n\n          <div className=\"form-group text-left\">\n            <label htmlFor=\"loginPassword\">Password</label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              id=\"loginPassword\"\n              placeholder=\"Password\"\n              value={state.loginPassword}\n              onChange={handleChange}\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"btn btn-dark\"\n            style={{ width: \"100% \" }}\n            onClick={handleSubmitClick}\n          >\n            Login\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/header/Header\";\nimport Home from \"./components/home/Home\";\nimport LoginForm from \"./components/loginForm/LoginForm\";\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n\n      <Switch>\n        <Route path=\"/login\">\n          <LoginForm />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}